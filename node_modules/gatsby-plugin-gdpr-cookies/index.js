"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.initializeAndTrack = exports.trackVisit = exports.initializePlugin = void 0;

var _universalCookie = _interopRequireDefault(require("universal-cookie"));

var _validTrackingId = require("./valid-tracking-id");

var cookies = new _universalCookie.default();
var currentEnvironment = process.env.ENV || process.env.NODE_ENV || "development";

var isEnvironmentValid = function isEnvironmentValid(environments) {
  return environments.includes(currentEnvironment);
}; // initializing helpers


var initGoogleAnalytics = function initGoogleAnalytics(options) {
  if (cookies.get(options.googleAnalytics.cookieName) === "true" && (0, _validTrackingId.validGATrackingId)(options)) {
    window.dataLayer = window.dataLayer || [];

    window.gtag = function () {
      window.dataLayer.push(arguments);
    };

    window.gtag('js', new Date());
    window["ga-disable-" + options.googleAnalytics.trackingId] = false;
    var gaAnonymize = options.googleAnalytics.anonymize;
    var gaAllowAdFeatures = options.googleAnalytics.allowAdFeatures;
    gaAnonymize = gaAnonymize !== undefined ? gaAnonymize : true;
    gaAllowAdFeatures = gaAllowAdFeatures !== undefined ? gaAllowAdFeatures : true;
    window.gtag('config', options.googleAnalytics.trackingId, {
      'anonymize_ip': gaAnonymize,
      'allow_google_signals': gaAllowAdFeatures
    });
    window.GoogleAnalyticsIntialized = true;
  } else {
    window["ga-disable-" + options.googleAnalytics.trackingId] = true;
  }
};

var initFacebookPixel = function initFacebookPixel(options) {
  if (cookies.get(options.facebookPixel.cookieName) === "true" && (0, _validTrackingId.validFbPixelId)(options) && typeof window.fbq === "function") {
    window.fbq("init", options.facebookPixel.pixelId);
    window.FacebookPixelInitialized = true;
  }
};

var checkIfGoogleAnalyticsIsInitilized = function checkIfGoogleAnalyticsIsInitilized() {
  return !!window.GoogleAnalyticsIntialized;
};

var checkIfFacebookPixelIsInitilized = function checkIfFacebookPixelIsInitilized() {
  return !!window.FacebookPixelInitialized;
};

var initializePlugin = function initializePlugin(options) {
  if (isEnvironmentValid(options.environments)) {
    // google analytics
    initGoogleAnalytics(options); // facebook pixel

    initFacebookPixel(options);
  }
};

exports.initializePlugin = initializePlugin;

var trackVisit = function trackVisit(options, location) {
  if (isEnvironmentValid(options.environments)) {
    // google analytics
    if (!checkIfGoogleAnalyticsIsInitilized()) initGoogleAnalytics(options); // also look fot gtag

    if (cookies.get(options.googleAnalytics.cookieName) === "true" && (0, _validTrackingId.validGATrackingId)(options) && typeof window.gtag === "function") {
      var pagePath = location ? location.pathname + location.search + location.hash : undefined;
      window.gtag("event", "page_view", {
        page_path: pagePath
      });
    } // google tag manager


    if (cookies.get(options.googleTagManager.cookieName) === "true" && (0, _validTrackingId.validGTMTrackingId)(options)) {
      setTimeout(function () {
        var data = options.googleTagManager.dataLayerName ? window[options.googleTagManager.dataLayerName] : window.dataLayer;

        if (typeof data === "object") {
          var eventName = options.googleTagManager.routeChangeEvent || "gatsbyRouteChange";
          data.push({
            event: eventName
          });
        }
      }, 50);
    } // facebook pixel


    if (!checkIfFacebookPixelIsInitilized()) initFacebookPixel(options);

    if (cookies.get(options.facebookPixel.cookieName) === "true" && (0, _validTrackingId.validFbPixelId)(options) && typeof window.fbq === "function") {
      window.fbq("track", "PageView");
    }
  }
};

exports.trackVisit = trackVisit;

var initializeAndTrack = function initializeAndTrack(location) {
  var options = window.gatsbyPluginGDPRCookiesOptions;

  if (location === undefined || location === null) {
    console.error('Please provide a reach router location to the initializeAndTrack function.');
  } else {
    trackVisit(options, location);
  }
};

exports.initializeAndTrack = initializeAndTrack;